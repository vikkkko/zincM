//! { "cases": [ {
//!     "case": "first",
//!     "input": {
//!         "witness": "42"
//!     },
//!     "output": "0x3f0"
//! }, {
//!     "case": "second",
//!     "input": {
//!         "witness": "64"
//!     },
//!     "output": "0x600"
//! }, {
//!     "case": "third",
//!     "input": {
//!         "witness": "1000000"
//!     },
//!     "output": "0x16e3600"
//! } ] }

struct Data {
    a: field,
}

impl Data {
    pub fn new(a: field) -> Self {
        Self { a: a }
    }

    pub fn double(self) -> Self {
        Self {
            a: self.a * 2 as field,
        }
    }

    pub fn triple(self) -> Self {
        Self {
            a: self.a * 3 as field,
        }
    }

    pub fn quadruple(self) -> Self {
        Self {
            a: self.a * 4 as field,
        }
    }

    pub fn into_inner(self) -> field {
        self.a
    }
}

fn main(witness: field) -> field {
    Data::new(witness)
        .double()
        .triple()
        .quadruple()
        .into_inner()
}
