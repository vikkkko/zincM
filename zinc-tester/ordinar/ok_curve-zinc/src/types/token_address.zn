//!
//! The Curve Stableswap contract token ID.
//!

use crate::types::Balance;
use crate::types::Address;
use crate::constants::MAX_TOKEN_PRECISION;

/// 
/// The token IDs of the Localhost testnet.
/// 
pub enum TokenAddress {
    ETH = 0x0000000000000000000000000000000000000000,
    DAI = 0x8C1f0b5C3D91534848A8DB08C89Aa4f641Debe25,
    wBTC = 0x65924160770041BAF5188840Ed2e8Da4219800D1,
    BAT = 0x5AC1b7010eFA33F6dFDc81C0a278B1f80EF87ECd,
    MLTT = 0x83d3e618573F49061bE4248C6B5FCc8b8fd97cD6,

    Unknown = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,
}

impl TokenAddress {
    /// 
    /// Converts an `u16` into token ID.
    /// 
    pub fn from_address(value: Address) -> Self {
        match value {
            0x0000000000000000000000000000000000000000 => Self::ETH,
            0x8C1f0b5C3D91534848A8DB08C89Aa4f641Debe25 => Self::DAI,
            0x65924160770041BAF5188840Ed2e8Da4219800D1 => Self::wBTC,
            0x5AC1b7010eFA33F6dFDc81C0a278B1f80EF87ECd => Self::BAT,
            0x83d3e618573F49061bE4248C6B5FCc8b8fd97cD6 => Self::MLTT,

            another => {
                // the only way of panicking explicitly
                require(false, "Token address is unknown");

                // unreachable
                Self::Unknown
            }
        }
    }

    /// 
    /// Returns the token precision.
    /// 
    pub fn precision(self) -> u8 {
        match self {
            Self::ETH => 18,
            Self::DAI => 18,
            Self::wBTC => 8,
            Self::BAT => 18,
            Self::MLTT => 18,
            
            Self::Unknown => {
                // the only way of panicking explicitly
                require(false, "Token address is unknown");

                // unreachable
                0
            }
        }
    }

    ///
    /// Returns the multiplier required to equalize the token precisions.
    ///
    pub fn magnitude_diff(self) -> Balance {
        let mut diff: Balance = 1;
        for i in 0..MAX_TOKEN_PRECISION while i < MAX_TOKEN_PRECISION - self.precision() {
            diff *= 10 as Balance;
        }
        diff
    }
}
