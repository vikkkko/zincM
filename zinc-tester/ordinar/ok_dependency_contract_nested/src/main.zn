//!
//! The 'dependency_contract_nested' contract entry.
//!

contract DependencyContractNested {
    pub x: u8;
    pub y: u8;
    pub z: u8;

    pub fn new(x: u8, y: u8, z: u8) -> Self {
        Self {
            x: x,
            y: y,
            z: z,
        }
    }

    pub fn double(mut self) {
        self.x *= 2;
        self.y *= 2;
        self.z *= 2;
    }

    pub fn sum_with_dependencies(
        self,
        middleware_x: u8,
        middleware_y: u8,
        middleware_z: u8,
        inner_x: u8,
        inner_y: u8,
        inner_z: u8,
    ) -> u8 {
        let middleware_instance = middleware::Middleware::new(
            middleware_x,
            middleware_y,
            middleware_z,
        );

        self.sum() + middleware_instance.sum_with_inner(inner_x, inner_y, inner_z)
    }

    pub fn sum(self) -> u8 {
        self.x + self.y + self.z
    }
}

#[test]
fn default() {
    let instance = DependencyContractNested::new(1, 3, 5);

    let result = instance.sum_with_dependencies(7, 9, 11, 1, 2, 3);

    let expected = 42;

    require(result == expected);
}

#[test]
fn double() {
    let mut instance = DependencyContractNested::new(1, 3, 5);

    instance.double();

    let result = instance.sum_with_dependencies(
        7 * 2,
        9 * 2,
        11 * 2,
        1 * 2,
        2 * 2,
        3 * 2,
    );

    let expected = 42 * 2;

    require(result == expected);
}

#[test]
#[should_panic]
fn panic() {
    require(false);
}
